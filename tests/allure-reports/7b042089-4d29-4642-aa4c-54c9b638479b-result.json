{"name": "test_header_button_trade_now[chrome-license=FCA--NoReg-Empty-Empty]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"/#\" class=\"cc-header__signup btn btn--sm btn--darkText hideSm js_signup \" data-type=\"btn_header\">...</a> is not clickable at point (1442, 110). Other element would receive the click: <div class=\"overlay\" id=\"l_overlay\">...</div>\n  (Session info: chrome=108.0.5359.98)\nStacktrace:\n0   chromedriver                        0x0000000106319f38 chromedriver + 4910904\n1   chromedriver                        0x0000000106299a03 chromedriver + 4385283\n2   chromedriver                        0x0000000105ede747 chromedriver + 472903\n3   chromedriver                        0x0000000105f2c588 chromedriver + 791944\n4   chromedriver                        0x0000000105f299ec chromedriver + 780780\n5   chromedriver                        0x0000000105f26671 chromedriver + 767601\n6   chromedriver                        0x0000000105f2518b chromedriver + 762251\n7   chromedriver                        0x0000000105f15ac3 chromedriver + 699075\n8   chromedriver                        0x0000000105f49112 chromedriver + 909586\n9   chromedriver                        0x0000000105f150ed chromedriver + 696557\n10  chromedriver                        0x0000000105f492ce chromedriver + 910030\n11  chromedriver                        0x0000000105f6428e chromedriver + 1020558\n12  chromedriver                        0x0000000105f48ee3 chromedriver + 909027\n13  chromedriver                        0x0000000105f1330c chromedriver + 688908\n14  chromedriver                        0x0000000105f1488e chromedriver + 694414\n15  chromedriver                        0x00000001062e71de chromedriver + 4702686\n16  chromedriver                        0x00000001062ebb19 chromedriver + 4721433\n17  chromedriver                        0x00000001062f328e chromedriver + 4752014\n18  chromedriver                        0x00000001062ec91a chromedriver + 4725018\n19  chromedriver                        0x00000001062c0b02 chromedriver + 4545282\n20  chromedriver                        0x000000010630b888 chromedriver + 4851848\n21  chromedriver                        0x000000010630ba05 chromedriver + 4852229\n22  chromedriver                        0x0000000106321e5f chromedriver + 4943455\n23  libsystem_pthread.dylib             0x00007fff204678fc _pthread_start + 224\n24  libsystem_pthread.dylib             0x00007fff20463443 thread_start + 15", "trace": "self = <capital_com.tests.test_capital_page.TestSample object at 0x10aec24d0>\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"c6f50274dcd1074b0ab199007938f705\")>\ncur_login = 'Empty', cur_password = 'Empty', cur_role = 'NoReg'\ncur_language = '', cur_license = 'license=FCA'\n\n    def test_header_button_trade_now(self, d, cur_login, cur_password, cur_role, cur_language, cur_license):\n        global test_link\n        global page\n        cur_login = cur_login\n        cur_password = cur_password\n        cur_cur_role = cur_role\n        cur_license = cur_license\n        cur_language = cur_language\n    \n        # Checks that the current page is Capital.com\n    \n        # page = CapitalPage(d, test_link)\n        # page.check_that_cur_page_has_header()\n        # нажимаем кнопку \"Sign up\"\n        page = HeaderElement(d, test_link)\n>       page.click_button_signup_on_header()\n\ntest_capital_page.py:148: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../pages/header_element.py:15: in click_button_signup_on_header\n    self.browser.find_element(*HeaderElementLocators.BUTTON_SIGNUP).click()\n../.venv/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\n../.venv/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:410: in _execute\n    return self._parent.execute(command, params)\n../.venv/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:444: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10a940d90>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...fff204678fc _pthread_start + 224\\\\n24  libsystem_pthread.dylib             0x00007fff20463443 thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = \"{}.{}\".format(frame[\"className\"], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"/#\" class=\"cc-header__signup btn btn--sm btn--darkText hideSm js_signup \" data-type=\"btn_header\">...</a> is not clickable at point (1442, 110). Other element would receive the click: <div class=\"overlay\" id=\"l_overlay\">...</div>\nE         (Session info: chrome=108.0.5359.98)\nE       Stacktrace:\nE       0   chromedriver                        0x0000000106319f38 chromedriver + 4910904\nE       1   chromedriver                        0x0000000106299a03 chromedriver + 4385283\nE       2   chromedriver                        0x0000000105ede747 chromedriver + 472903\nE       3   chromedriver                        0x0000000105f2c588 chromedriver + 791944\nE       4   chromedriver                        0x0000000105f299ec chromedriver + 780780\nE       5   chromedriver                        0x0000000105f26671 chromedriver + 767601\nE       6   chromedriver                        0x0000000105f2518b chromedriver + 762251\nE       7   chromedriver                        0x0000000105f15ac3 chromedriver + 699075\nE       8   chromedriver                        0x0000000105f49112 chromedriver + 909586\nE       9   chromedriver                        0x0000000105f150ed chromedriver + 696557\nE       10  chromedriver                        0x0000000105f492ce chromedriver + 910030\nE       11  chromedriver                        0x0000000105f6428e chromedriver + 1020558\nE       12  chromedriver                        0x0000000105f48ee3 chromedriver + 909027\nE       13  chromedriver                        0x0000000105f1330c chromedriver + 688908\nE       14  chromedriver                        0x0000000105f1488e chromedriver + 694414\nE       15  chromedriver                        0x00000001062e71de chromedriver + 4702686\nE       16  chromedriver                        0x00000001062ebb19 chromedriver + 4721433\nE       17  chromedriver                        0x00000001062f328e chromedriver + 4752014\nE       18  chromedriver                        0x00000001062ec91a chromedriver + 4725018\nE       19  chromedriver                        0x00000001062c0b02 chromedriver + 4545282\nE       20  chromedriver                        0x000000010630b888 chromedriver + 4851848\nE       21  chromedriver                        0x000000010630ba05 chromedriver + 4852229\nE       22  chromedriver                        0x0000000106321e5f chromedriver + 4943455\nE       23  libsystem_pthread.dylib             0x00007fff204678fc _pthread_start + 224\nE       24  libsystem_pthread.dylib             0x00007fff20463443 thread_start + 15\n\n../.venv/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:249: ElementClickInterceptedException"}, "parameters": [{"name": "go", "value": "'chrome'"}, {"name": "cur_license", "value": "'license=FCA'"}, {"name": "cur_language", "value": "''"}, {"name": "cur_role", "value": "'NoReg'"}, {"name": "cur_login", "value": "'Empty'"}, {"name": "cur_password", "value": "'Empty'"}], "start": 1670854215258, "stop": 1670854216389, "uuid": "f40136c4-839a-4bd0-83f9-220c3df5dfec", "historyId": "e0f011d8c37a3b3ee12f86aef271cdc9", "testCaseId": "82ceb73252704bc299dba817aca3ff00", "fullName": "tests.test_capital_page.TestSample#test_header_button_trade_now", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_capital_page"}, {"name": "subSuite", "value": "TestSample"}, {"name": "host", "value": "MacBook-Pro-Aleksandr.local"}, {"name": "thread", "value": "30508-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_capital_page"}]}