{"uid":"2b2397265c05b0cb","name":"test_14_01_widget_trading_calculator_button_start_trading[edge-NoReg-hr-SEY-Empty-Empty]","fullName":"tests.capital_page_test.Tests#test_14_01_widget_trading_calculator_button_start_trading","historyId":"a66aace69b93aaf9f991366258e7f44a","time":{"start":1673457274014,"stop":1673457274014,"duration":0},"description":"\n        Check: widget \"Trading calculator\" -> button \"Start trading\"\n        Licence: ALL. Language - EN.\n        ","descriptionHtml":"<pre><code>    Check: widget &quot;Trading calculator&quot; -&gt; button &quot;Start trading&quot;\n    Licence: ALL. Language - EN.\n</code></pre>\n","status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: Microsoft Edge failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from msedge location /usr/bin/microsoft-edge is no longer running, so msedgedriver is assuming that msedge has crashed.)\nStacktrace:\n#0 0x55de9a416a33 <unknown>\n#1 0x55de9a1ac111 <unknown>\n#2 0x55de9a1d657d <unknown>\n#3 0x55de9a1d19b0 <unknown>\n#4 0x55de9a212a6f <unknown>\n#5 0x55de9a20a613 <unknown>\n#6 0x55de9a1dd199 <unknown>\n#7 0x55de9a1de3ee <unknown>\n#8 0x55de9a456d08 <unknown>\n#9 0x55de9a458bbe <unknown>\n#10 0x55de9a45862f <unknown>\n#11 0x55de9a4592d5 <unknown>\n#12 0x55de9a445659 <unknown>\n#13 0x55de9a45963e <unknown>\n#14 0x55de9a43aa86 <unknown>\n#15 0x55de9a4751f8 <unknown>\n#16 0x55de9a475330 <unknown>\n#17 0x55de9a48f066 <unknown>\n#18 0x7fccccf5cb43 <unknown>","statusTrace":"browser = 'edge'\n\n    @pytest.fixture(scope=\"class\")\n    def d(browser):\n        \"\"\"WebDriver Initialization\"\"\"\n        driver = None\n        if browser == \"chrome\":\n            driver = init_remote_driver_chrome()\n        elif browser == \"edge\":\n>           driver = init_remote_driver_edge()\n\ntests/conftest.py:120: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/conftest.py:151: in init_remote_driver_edge\n    driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()))\n../../../.cache/pypoetry/virtualenvs/testcapitalcom-G_ZVEfM_-py3.10/lib/python3.10/site-packages/selenium/webdriver/edge/webdriver.py:73: in __init__\n    super().__init__(\n../../../.cache/pypoetry/virtualenvs/testcapitalcom-G_ZVEfM_-py3.10/lib/python3.10/site-packages/selenium/webdriver/chromium/webdriver.py:106: in __init__\n    super().__init__(\n../../../.cache/pypoetry/virtualenvs/testcapitalcom-G_ZVEfM_-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:288: in __init__\n    self.start_session(capabilities, browser_profile)\n../../../.cache/pypoetry/virtualenvs/testcapitalcom-G_ZVEfM_-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:381: in start_session\n    response = self.execute(Command.NEW_SESSION, parameters)\n../../../.cache/pypoetry/virtualenvs/testcapitalcom-G_ZVEfM_-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:444: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fb8d11c5db0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: Microsoft Edge failed to start: ...\\\\n#16 0x55de9a475330 \\\\u003Cunknown>\\\\n#17 0x55de9a48f066 \\\\u003Cunknown>\\\\n#18 0x7fccccf5cb43 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = \"{}.{}\".format(frame[\"className\"], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: Microsoft Edge failed to start: exited abnormally.\nE         (unknown error: DevToolsActivePort file doesn't exist)\nE         (The process started from msedge location /usr/bin/microsoft-edge is no longer running, so msedgedriver is assuming that msedge has crashed.)\nE       Stacktrace:\nE       #0 0x55de9a416a33 <unknown>\nE       #1 0x55de9a1ac111 <unknown>\nE       #2 0x55de9a1d657d <unknown>\nE       #3 0x55de9a1d19b0 <unknown>\nE       #4 0x55de9a212a6f <unknown>\nE       #5 0x55de9a20a613 <unknown>\nE       #6 0x55de9a1dd199 <unknown>\nE       #7 0x55de9a1de3ee <unknown>\nE       #8 0x55de9a456d08 <unknown>\nE       #9 0x55de9a458bbe <unknown>\nE       #10 0x55de9a45862f <unknown>\nE       #11 0x55de9a4592d5 <unknown>\nE       #12 0x55de9a445659 <unknown>\nE       #13 0x55de9a45963e <unknown>\nE       #14 0x55de9a43aa86 <unknown>\nE       #15 0x55de9a4751f8 <unknown>\nE       #16 0x55de9a475330 <unknown>\nE       #17 0x55de9a48f066 <unknown>\nE       #18 0x7fccccf5cb43 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcom-G_ZVEfM_-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:249: WebDriverException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"d","time":{"start":1673457127452,"stop":1673457138953,"duration":11501},"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: Microsoft Edge failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from msedge location /usr/bin/microsoft-edge is no longer running, so msedgedriver is assuming that msedge has crashed.)\nStacktrace:\n#0 0x55de9a416a33 <unknown>\n#1 0x55de9a1ac111 <unknown>\n#2 0x55de9a1d657d <unknown>\n#3 0x55de9a1d19b0 <unknown>\n#4 0x55de9a212a6f <unknown>\n#5 0x55de9a20a613 <unknown>\n#6 0x55de9a1dd199 <unknown>\n#7 0x55de9a1de3ee <unknown>\n#8 0x55de9a456d08 <unknown>\n#9 0x55de9a458bbe <unknown>\n#10 0x55de9a45862f <unknown>\n#11 0x55de9a4592d5 <unknown>\n#12 0x55de9a445659 <unknown>\n#13 0x55de9a45963e <unknown>\n#14 0x55de9a43aa86 <unknown>\n#15 0x55de9a4751f8 <unknown>\n#16 0x55de9a475330 <unknown>\n#17 0x55de9a48f066 <unknown>\n#18 0x7fccccf5cb43 <unknown>\n\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcom-G_ZVEfM_-py3.10/lib/python3.10/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcom-G_ZVEfM_-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py\", line 1128, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcom-G_ZVEfM_-py3.10/lib/python3.10/site-packages/_pytest/fixtures.py\", line 907, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n  File \"/home/runner/work/TestCapitalCom/TestCapitalCom/tests/conftest.py\", line 120, in d\n    driver = init_remote_driver_edge()\n  File \"/home/runner/work/TestCapitalCom/TestCapitalCom/tests/conftest.py\", line 151, in init_remote_driver_edge\n    driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()))\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcom-G_ZVEfM_-py3.10/lib/python3.10/site-packages/selenium/webdriver/edge/webdriver.py\", line 73, in __init__\n    super().__init__(\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcom-G_ZVEfM_-py3.10/lib/python3.10/site-packages/selenium/webdriver/chromium/webdriver.py\", line 106, in __init__\n    super().__init__(\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcom-G_ZVEfM_-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py\", line 288, in __init__\n    self.start_session(capabilities, browser_profile)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcom-G_ZVEfM_-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py\", line 381, in start_session\n    response = self.execute(Command.NEW_SESSION, parameters)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcom-G_ZVEfM_-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py\", line 444, in execute\n    self.error_handler.check_response(response)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcom-G_ZVEfM_-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py\", line 249, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true},{"name":"browser","time":{"start":1673457127452,"stop":1673457127452,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"worker_id","time":{"start":1673457127452,"stop":1673457127452,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"afterStages":[],"labels":[{"name":"story","value":"S_14.01 | Testing 'Start trading' button on the 'Trading calculator' widget"},{"name":"feature","value":"F_14 | Testing 'Trading calculator' widget"},{"name":"epic","value":"Testing capital.com. All language. All license"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"capital_page_test"},{"name":"subSuite","value":"Tests"},{"name":"host","value":"fv-az587-63"},{"name":"thread","value":"2760-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.capital_page_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"cur_language","value":"'hr'"},{"name":"cur_license","value":"'SEY'"},{"name":"cur_login","value":"'Empty'"},{"name":"cur_password","value":"'Empty'"},{"name":"cur_role","value":"'NoReg'"},{"name":"go","value":"'edge'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"2b2397265c05b0cb.json","parameterValues":["'hr'","'SEY'","'Empty'","'Empty'","'NoReg'","'edge'"]}