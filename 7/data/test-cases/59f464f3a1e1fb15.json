{"uid":"59f464f3a1e1fb15","name":"TC_08_01 with parameters: NoReg, da, SEY","fullName":"tests.capital_page_test.Tests#test_08_01_widget_trading_instrument","historyId":"ef1ce0598a384b514691651d3ed7fdb6","time":{"start":1674212269251,"stop":1674212275825,"duration":6574},"description":"\n        Check: widget \"Trading instrument\"\n        Language: ALL. Licence: All.\n        Widgen has 2 layouts\n        ","descriptionHtml":"<pre><code>    Check: widget &quot;Trading instrument&quot;\n    Language: ALL. Licence: All.\n    Widgen has 2 layouts\n</code></pre>\n","status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (1461, 1108)\n  (Session info: headless chrome=109.0.5414.74)\nStacktrace:\n#0 0x55f9d8a5b303 <unknown>\n#1 0x55f9d882fd37 <unknown>\n#2 0x55f9d8872e29 <unknown>\n#3 0x55f9d8870e2f <unknown>\n#4 0x55f9d886e9de <unknown>\n#5 0x55f9d886db7d <unknown>\n#6 0x55f9d88619a5 <unknown>\n#7 0x55f9d888c982 <unknown>\n#8 0x55f9d886122f <unknown>\n#9 0x55f9d888cb4e <unknown>\n#10 0x55f9d88a488c <unknown>\n#11 0x55f9d888c753 <unknown>\n#12 0x55f9d885fa14 <unknown>\n#13 0x55f9d8860b7e <unknown>\n#14 0x55f9d8aaa32e <unknown>\n#15 0x55f9d8aadc0e <unknown>\n#16 0x55f9d8a90610 <unknown>\n#17 0x55f9d8aaec23 <unknown>\n#18 0x55f9d8a82545 <unknown>\n#19 0x55f9d8acf6a8 <unknown>\n#20 0x55f9d8acf836 <unknown>\n#21 0x55f9d8aead13 <unknown>\n#22 0x7f96e2fe6b43 <unknown>","statusTrace":"self = <tests.capital_page_test.Tests object at 0x7efe5bebae30>\nworker_id = 'gw1'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"ae575b42b1e1cfa2160f68d4555e842d\")>\ncur_login = 'Empty', cur_password = 'Empty', cur_role = 'NoReg'\ncur_language = 'da', cur_license = 'SEY', prob_run_tc = None\n\n    @allure.feature(\"F_08 | Widget [Trading instrument]\")\n    @allure.story(\"S_08.01 | Widget [Trading instrument] tab [Most traded] button [Trade]\")\n    @allure.step(f\"{datetime.datetime.now()}.   \"\n                 f\"Start test 'Click 'Trade' buttons on the 'Most traded' tab 'Trading instrument' widget'.\")\n    @allure.title(\"TC_08_01 with parameters: {cur_role}, {cur_language}, {cur_license}\")\n    def test_08_01_widget_trading_instrument(\n        self, worker_id, d, cur_login, cur_password, cur_role, cur_language, cur_license, prob_run_tc\n    ):\n        \"\"\"\n        Check: widget \"Trading instrument\"\n        Language: ALL. Licence: All.\n        Widgen has 2 layouts\n        \"\"\"\n        global test_link\n        global page\n    \n        tab_name = \"Most traded\"\n        print(f\"worker_id = {worker_id}\")\n    \n        if not (cur_license == \"FCA\" and tab_name == \"Cryptocurrencies\"):\n>           self.preconditions(d, cur_login, cur_password, cur_role, cur_language, cur_license)\n\ntests/capital_page_test.py:882: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/capital_page_test.py:62: in preconditions\n    page.button_accept_all_cookies_click()\npages/capital_com/capital_page.py:34: in button_accept_all_cookies_click\n    self.browser.find_element(*OnTrastLocators.BUTTON_ACCEPT_ALL_COOKIE).click()\n../../../.cache/pypoetry/virtualenvs/testcapitalcom-G_ZVEfM_-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcom-G_ZVEfM_-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:410: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcom-G_ZVEfM_-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:444: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7efe5b16bbe0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x55f9d8acf836 \\\\u003Cunknown>\\\\n#21 0x55f9d8aead13 \\\\u003Cunknown>\\\\n#22 0x7f96e2fe6b43 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = \"{}.{}\".format(frame[\"className\"], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (1461, 1108)\nE         (Session info: headless chrome=109.0.5414.74)\nE       Stacktrace:\nE       #0 0x55f9d8a5b303 <unknown>\nE       #1 0x55f9d882fd37 <unknown>\nE       #2 0x55f9d8872e29 <unknown>\nE       #3 0x55f9d8870e2f <unknown>\nE       #4 0x55f9d886e9de <unknown>\nE       #5 0x55f9d886db7d <unknown>\nE       #6 0x55f9d88619a5 <unknown>\nE       #7 0x55f9d888c982 <unknown>\nE       #8 0x55f9d886122f <unknown>\nE       #9 0x55f9d888cb4e <unknown>\nE       #10 0x55f9d88a488c <unknown>\nE       #11 0x55f9d888c753 <unknown>\nE       #12 0x55f9d885fa14 <unknown>\nE       #13 0x55f9d8860b7e <unknown>\nE       #14 0x55f9d8aaa32e <unknown>\nE       #15 0x55f9d8aadc0e <unknown>\nE       #16 0x55f9d8a90610 <unknown>\nE       #17 0x55f9d8aaec23 <unknown>\nE       #18 0x55f9d8a82545 <unknown>\nE       #19 0x55f9d8acf6a8 <unknown>\nE       #20 0x55f9d8acf836 <unknown>\nE       #21 0x55f9d8aead13 <unknown>\nE       #22 0x7f96e2fe6b43 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcom-G_ZVEfM_-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:249: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"browser","time":{"start":1674212267558,"stop":1674212267558,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"stepsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"d","time":{"start":1674212267558,"stop":1674212269208,"duration":1650},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"stepsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"worker_id","time":{"start":1674212267558,"stop":1674212267558,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"stepsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"go","time":{"start":1674212269208,"stop":1674212269208,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"stepsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"cur_license","time":{"start":1674212269209,"stop":1674212269209,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"stepsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"cur_language","time":{"start":1674212269209,"stop":1674212269209,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"stepsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"cur_role","time":{"start":1674212269209,"stop":1674212269209,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"stepsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"prob_run_tc","time":{"start":1674212269250,"stop":1674212269250,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"stepsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"description":"\n        Check: widget \"Trading instrument\"\n        Language: ALL. Licence: All.\n        Widgen has 2 layouts\n        ","status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (1461, 1108)\n  (Session info: headless chrome=109.0.5414.74)\nStacktrace:\n#0 0x55f9d8a5b303 <unknown>\n#1 0x55f9d882fd37 <unknown>\n#2 0x55f9d8872e29 <unknown>\n#3 0x55f9d8870e2f <unknown>\n#4 0x55f9d886e9de <unknown>\n#5 0x55f9d886db7d <unknown>\n#6 0x55f9d88619a5 <unknown>\n#7 0x55f9d888c982 <unknown>\n#8 0x55f9d886122f <unknown>\n#9 0x55f9d888cb4e <unknown>\n#10 0x55f9d88a488c <unknown>\n#11 0x55f9d888c753 <unknown>\n#12 0x55f9d885fa14 <unknown>\n#13 0x55f9d8860b7e <unknown>\n#14 0x55f9d8aaa32e <unknown>\n#15 0x55f9d8aadc0e <unknown>\n#16 0x55f9d8a90610 <unknown>\n#17 0x55f9d8aaec23 <unknown>\n#18 0x55f9d8a82545 <unknown>\n#19 0x55f9d8acf6a8 <unknown>\n#20 0x55f9d8acf836 <unknown>\n#21 0x55f9d8aead13 <unknown>\n#22 0x7f96e2fe6b43 <unknown>","statusTrace":"self = <tests.capital_page_test.Tests object at 0x7efe5bebae30>\nworker_id = 'gw1'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"ae575b42b1e1cfa2160f68d4555e842d\")>\ncur_login = 'Empty', cur_password = 'Empty', cur_role = 'NoReg'\ncur_language = 'da', cur_license = 'SEY', prob_run_tc = None\n\n    @allure.feature(\"F_08 | Widget [Trading instrument]\")\n    @allure.story(\"S_08.01 | Widget [Trading instrument] tab [Most traded] button [Trade]\")\n    @allure.step(f\"{datetime.datetime.now()}.   \"\n                 f\"Start test 'Click 'Trade' buttons on the 'Most traded' tab 'Trading instrument' widget'.\")\n    @allure.title(\"TC_08_01 with parameters: {cur_role}, {cur_language}, {cur_license}\")\n    def test_08_01_widget_trading_instrument(\n        self, worker_id, d, cur_login, cur_password, cur_role, cur_language, cur_license, prob_run_tc\n    ):\n        \"\"\"\n        Check: widget \"Trading instrument\"\n        Language: ALL. Licence: All.\n        Widgen has 2 layouts\n        \"\"\"\n        global test_link\n        global page\n    \n        tab_name = \"Most traded\"\n        print(f\"worker_id = {worker_id}\")\n    \n        if not (cur_license == \"FCA\" and tab_name == \"Cryptocurrencies\"):\n>           self.preconditions(d, cur_login, cur_password, cur_role, cur_language, cur_license)\n\ntests/capital_page_test.py:882: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/capital_page_test.py:62: in preconditions\n    page.button_accept_all_cookies_click()\npages/capital_com/capital_page.py:34: in button_accept_all_cookies_click\n    self.browser.find_element(*OnTrastLocators.BUTTON_ACCEPT_ALL_COOKIE).click()\n../../../.cache/pypoetry/virtualenvs/testcapitalcom-G_ZVEfM_-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcom-G_ZVEfM_-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:410: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcom-G_ZVEfM_-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:444: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7efe5b16bbe0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x55f9d8acf836 \\\\u003Cunknown>\\\\n#21 0x55f9d8aead13 \\\\u003Cunknown>\\\\n#22 0x7f96e2fe6b43 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = \"{}.{}\".format(frame[\"className\"], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (1461, 1108)\nE         (Session info: headless chrome=109.0.5414.74)\nE       Stacktrace:\nE       #0 0x55f9d8a5b303 <unknown>\nE       #1 0x55f9d882fd37 <unknown>\nE       #2 0x55f9d8872e29 <unknown>\nE       #3 0x55f9d8870e2f <unknown>\nE       #4 0x55f9d886e9de <unknown>\nE       #5 0x55f9d886db7d <unknown>\nE       #6 0x55f9d88619a5 <unknown>\nE       #7 0x55f9d888c982 <unknown>\nE       #8 0x55f9d886122f <unknown>\nE       #9 0x55f9d888cb4e <unknown>\nE       #10 0x55f9d88a488c <unknown>\nE       #11 0x55f9d888c753 <unknown>\nE       #12 0x55f9d885fa14 <unknown>\nE       #13 0x55f9d8860b7e <unknown>\nE       #14 0x55f9d8aaa32e <unknown>\nE       #15 0x55f9d8aadc0e <unknown>\nE       #16 0x55f9d8a90610 <unknown>\nE       #17 0x55f9d8aaec23 <unknown>\nE       #18 0x55f9d8a82545 <unknown>\nE       #19 0x55f9d8acf6a8 <unknown>\nE       #20 0x55f9d8acf836 <unknown>\nE       #21 0x55f9d8aead13 <unknown>\nE       #22 0x7f96e2fe6b43 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcom-G_ZVEfM_-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:249: ElementClickInterceptedException","steps":[{"name":"2023-01-20 10:57:44.602518.   Start test 'Click 'Trade' buttons on the 'Most traded' tab 'Trading instrument' widget'.","time":{"start":1674212269251,"stop":1674212275825,"duration":6574},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (1461, 1108)\n  (Session info: headless chrome=109.0.5414.74)\nStacktrace:\n#0 0x55f9d8a5b303 <unknown>\n#1 0x55f9d882fd37 <unknown>\n#2 0x55f9d8872e29 <unknown>\n#3 0x55f9d8870e2f <unknown>\n#4 0x55f9d886e9de <unknown>\n#5 0x55f9d886db7d <unknown>\n#6 0x55f9d88619a5 <unknown>\n#7 0x55f9d888c982 <unknown>\n#8 0x55f9d886122f <unknown>\n#9 0x55f9d888cb4e <unknown>\n#10 0x55f9d88a488c <unknown>\n#11 0x55f9d888c753 <unknown>\n#12 0x55f9d885fa14 <unknown>\n#13 0x55f9d8860b7e <unknown>\n#14 0x55f9d8aaa32e <unknown>\n#15 0x55f9d8aadc0e <unknown>\n#16 0x55f9d8a90610 <unknown>\n#17 0x55f9d8aaec23 <unknown>\n#18 0x55f9d8a82545 <unknown>\n#19 0x55f9d8acf6a8 <unknown>\n#20 0x55f9d8acf836 <unknown>\n#21 0x55f9d8aead13 <unknown>\n#22 0x7f96e2fe6b43 <unknown>\n\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcom-G_ZVEfM_-py3.10/lib/python3.10/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/home/runner/work/TestCapitalCom/TestCapitalCom/tests/capital_page_test.py\", line 882, in test_08_01_widget_trading_instrument\n    self.preconditions(d, cur_login, cur_password, cur_role, cur_language, cur_license)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcom-G_ZVEfM_-py3.10/lib/python3.10/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/home/runner/work/TestCapitalCom/TestCapitalCom/tests/capital_page_test.py\", line 62, in preconditions\n    page.button_accept_all_cookies_click()\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcom-G_ZVEfM_-py3.10/lib/python3.10/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/home/runner/work/TestCapitalCom/TestCapitalCom/pages/capital_com/capital_page.py\", line 34, in button_accept_all_cookies_click\n    self.browser.find_element(*OnTrastLocators.BUTTON_ACCEPT_ALL_COOKIE).click()\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcom-G_ZVEfM_-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py\", line 93, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcom-G_ZVEfM_-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py\", line 410, in _execute\n    return self._parent.execute(command, params)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcom-G_ZVEfM_-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py\", line 444, in execute\n    self.error_handler.check_response(response)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcom-G_ZVEfM_-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py\", line 249, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[{"name":"2023-01-20 10:57:44.601298.   Set preconditions","time":{"start":1674212269251,"stop":1674212275825,"duration":6574},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (1461, 1108)\n  (Session info: headless chrome=109.0.5414.74)\nStacktrace:\n#0 0x55f9d8a5b303 <unknown>\n#1 0x55f9d882fd37 <unknown>\n#2 0x55f9d8872e29 <unknown>\n#3 0x55f9d8870e2f <unknown>\n#4 0x55f9d886e9de <unknown>\n#5 0x55f9d886db7d <unknown>\n#6 0x55f9d88619a5 <unknown>\n#7 0x55f9d888c982 <unknown>\n#8 0x55f9d886122f <unknown>\n#9 0x55f9d888cb4e <unknown>\n#10 0x55f9d88a488c <unknown>\n#11 0x55f9d888c753 <unknown>\n#12 0x55f9d885fa14 <unknown>\n#13 0x55f9d8860b7e <unknown>\n#14 0x55f9d8aaa32e <unknown>\n#15 0x55f9d8aadc0e <unknown>\n#16 0x55f9d8a90610 <unknown>\n#17 0x55f9d8aaec23 <unknown>\n#18 0x55f9d8a82545 <unknown>\n#19 0x55f9d8acf6a8 <unknown>\n#20 0x55f9d8acf836 <unknown>\n#21 0x55f9d8aead13 <unknown>\n#22 0x7f96e2fe6b43 <unknown>\n\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcom-G_ZVEfM_-py3.10/lib/python3.10/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/home/runner/work/TestCapitalCom/TestCapitalCom/tests/capital_page_test.py\", line 62, in preconditions\n    page.button_accept_all_cookies_click()\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcom-G_ZVEfM_-py3.10/lib/python3.10/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/home/runner/work/TestCapitalCom/TestCapitalCom/pages/capital_com/capital_page.py\", line 34, in button_accept_all_cookies_click\n    self.browser.find_element(*OnTrastLocators.BUTTON_ACCEPT_ALL_COOKIE).click()\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcom-G_ZVEfM_-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py\", line 93, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcom-G_ZVEfM_-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py\", line 410, in _execute\n    return self._parent.execute(command, params)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcom-G_ZVEfM_-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py\", line 444, in execute\n    self.error_handler.check_response(response)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcom-G_ZVEfM_-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py\", line 249, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[{"name":"2023-01-20 10:57:44.600179.   Accept all cookies.","time":{"start":1674212271088,"stop":1674212275824,"duration":4736},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (1461, 1108)\n  (Session info: headless chrome=109.0.5414.74)\nStacktrace:\n#0 0x55f9d8a5b303 <unknown>\n#1 0x55f9d882fd37 <unknown>\n#2 0x55f9d8872e29 <unknown>\n#3 0x55f9d8870e2f <unknown>\n#4 0x55f9d886e9de <unknown>\n#5 0x55f9d886db7d <unknown>\n#6 0x55f9d88619a5 <unknown>\n#7 0x55f9d888c982 <unknown>\n#8 0x55f9d886122f <unknown>\n#9 0x55f9d888cb4e <unknown>\n#10 0x55f9d88a488c <unknown>\n#11 0x55f9d888c753 <unknown>\n#12 0x55f9d885fa14 <unknown>\n#13 0x55f9d8860b7e <unknown>\n#14 0x55f9d8aaa32e <unknown>\n#15 0x55f9d8aadc0e <unknown>\n#16 0x55f9d8a90610 <unknown>\n#17 0x55f9d8aaec23 <unknown>\n#18 0x55f9d8a82545 <unknown>\n#19 0x55f9d8acf6a8 <unknown>\n#20 0x55f9d8acf836 <unknown>\n#21 0x55f9d8aead13 <unknown>\n#22 0x7f96e2fe6b43 <unknown>\n\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcom-G_ZVEfM_-py3.10/lib/python3.10/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/home/runner/work/TestCapitalCom/TestCapitalCom/pages/capital_com/capital_page.py\", line 34, in button_accept_all_cookies_click\n    self.browser.find_element(*OnTrastLocators.BUTTON_ACCEPT_ALL_COOKIE).click()\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcom-G_ZVEfM_-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py\", line 93, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcom-G_ZVEfM_-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py\", line 410, in _execute\n    return self._parent.execute(command, params)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcom-G_ZVEfM_-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py\", line 444, in execute\n    self.error_handler.check_response(response)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcom-G_ZVEfM_-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py\", line 249, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"stepsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"ae575b42b1e1cfa2160f68d4555e842d\")>"},{"name":"cur_login","value":"'Empty'"},{"name":"cur_password","value":"'Empty'"},{"name":"cur_role","value":"'NoReg'"},{"name":"cur_language","value":"'da'"},{"name":"cur_license","value":"'SEY'"}],"attachmentsCount":0,"stepsCount":1,"shouldDisplayMessage":false,"hasContent":true}],"attachments":[],"parameters":[{"name":"worker_id","value":"'gw1'"},{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"ae575b42b1e1cfa2160f68d4555e842d\")>"},{"name":"cur_login","value":"'Empty'"},{"name":"cur_password","value":"'Empty'"},{"name":"cur_role","value":"'NoReg'"},{"name":"cur_language","value":"'da'"},{"name":"cur_license","value":"'SEY'"},{"name":"prob_run_tc","value":"None"}],"attachmentsCount":0,"stepsCount":2,"shouldDisplayMessage":false,"hasContent":true}],"attachments":[{"uid":"df1229fc2f60941f","name":"Screeshot","source":"df1229fc2f60941f.png","type":"image/png","size":2434962},{"uid":"637d3fa08cf4ad0c","name":"stdout","source":"637d3fa08cf4ad0c.txt","type":"text/plain","size":79}],"parameters":[],"attachmentsCount":2,"stepsCount":3,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"go::0","time":{"start":1674216063737,"stop":1674216063956,"duration":219},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"stepsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"story","value":"S_08.01 | Widget [Trading instrument] tab [Most traded] button [Trade]"},{"name":"epic","value":"Testing capital.com. All language. All license"},{"name":"feature","value":"F_08 | Widget [Trading instrument]"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"capital_page_test"},{"name":"subSuite","value":"Tests"},{"name":"host","value":"fv-az403-99"},{"name":"thread","value":"3020-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.capital_page_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"cur_language","value":"'da'"},{"name":"cur_license","value":"'SEY'"},{"name":"cur_login","value":"'Empty'"},{"name":"cur_password","value":"'Empty'"},{"name":"cur_role","value":"'NoReg'"},{"name":"go","value":"'chrome'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":4,"unknown":0,"total":5},"items":[{"uid":"63893013e4f41b","reportUrl":"https://AlexTom22.github.io/TestCapitalCom/6//#testresult/63893013e4f41b","status":"passed","time":{"start":1674171430525,"stop":1674171444199,"duration":13674}},{"uid":"79fc6b21abb5afa","reportUrl":"https://AlexTom22.github.io/TestCapitalCom/5//#testresult/79fc6b21abb5afa","status":"passed","time":{"start":1674076091077,"stop":1674076102227,"duration":11150}},{"uid":"a60e7d7903860385","reportUrl":"https://AlexTom22.github.io/TestCapitalCom/4//#testresult/a60e7d7903860385","status":"passed","time":{"start":1673908768009,"stop":1673908771478,"duration":3469}},{"uid":"87097f43f4ba6a63","reportUrl":"https://AlexTom22.github.io/TestCapitalCom/3//#testresult/87097f43f4ba6a63","status":"passed","time":{"start":1673880911123,"stop":1673880914233,"duration":3110}}]},"tags":[]},"source":"59f464f3a1e1fb15.json","parameterValues":["'da'","'SEY'","'Empty'","'Empty'","'NoReg'","'chrome'"]}