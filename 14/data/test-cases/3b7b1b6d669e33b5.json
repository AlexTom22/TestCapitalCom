{"uid":"3b7b1b6d669e33b5","name":"test_08_03_widget_trading_instrument[chrome-NoReg-zh-ASIC-Empty-Empty]","fullName":"tests.capital_page_test.Tests#test_08_03_widget_trading_instrument","historyId":"39678fc7ee3248f939e51f1cc4f96094","time":{"start":1673259023573,"stop":1673259028814,"duration":5241},"description":"\n        Check: widget \"Trading instrument\"\n        Licence: All. Language - EN.\n        Widgen has 2 layouts\n        ","descriptionHtml":"<pre><code>    Check: widget &quot;Trading instrument&quot;\n    Licence: All. Language - EN.\n    Widgen has 2 layouts\n</code></pre>\n","status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: headless chrome=108.0.5359.98)\nStacktrace:\n#0 0x56262dfc82a3 <unknown>\n#1 0x56262dd86dfd <unknown>\n#2 0x56262ddc49fc <unknown>\n#3 0x56262ddb8dc5 <unknown>\n#4 0x56262dde3b32 <unknown>\n#5 0x56262ddb861f <unknown>\n#6 0x56262dde3cfe <unknown>\n#7 0x56262ddfb47c <unknown>\n#8 0x56262dde3903 <unknown>\n#9 0x56262ddb6ece <unknown>\n#10 0x56262ddb7fde <unknown>\n#11 0x56262e01863e <unknown>\n#12 0x56262e01bb79 <unknown>\n#13 0x56262dffe89e <unknown>\n#14 0x56262e01ca83 <unknown>\n#15 0x56262dff1505 <unknown>\n#16 0x56262e03dca8 <unknown>\n#17 0x56262e03de36 <unknown>\n#18 0x56262e059333 <unknown>\n#19 0x7fb2bfe05b43 <unknown>","statusTrace":"self = <tests.capital_page_test.Tests object at 0x7fb2f623abf0>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"2fb1e949aa0fcc0d82b42aeb33d18c0d\")>\ncur_login = 'Empty', cur_password = 'Empty', cur_role = 'NoReg'\ncur_language = 'zh', cur_license = 'ASIC'\n\n    @allure.feature(\"F_08 | Widget [Trading instrument]\")\n    @allure.story(\"S_08.03 | Widget [Trading instrument] tab [Indices] button [Trade]\")\n    @allure.step(\"Start test 'Click 'Trade' buttons on the 'Indices' tab 'Trading instrument' widget'\")\n    def test_08_03_widget_trading_instrument(\n        self, worker_id, d, cur_login, cur_password, cur_role, cur_language, cur_license\n    ):\n        \"\"\"\n        Check: widget \"Trading instrument\"\n        Licence: All. Language - EN.\n        Widgen has 2 layouts\n        \"\"\"\n        global test_link\n        global page\n    \n        tab_name = \"Indices\"\n        print(f\"worker_id = {worker_id}\")\n    \n        if not (cur_license == \"FCA\" and tab_name == \"Cryptocurrencies\"):\n            self.preconditions(d, cur_login, cur_password, cur_role, cur_language, cur_license)\n    \n            page = CapitalPage(d, test_link)\n            if not page.current_page_is(test_link):\n                page.open_page()\n    \n            layout = page.what_is_the_current_layout(cur_language)\n            page.widget_trading_instrument_cur_tab_click(cur_language, layout, tab_name)\n            list_buttons = page.get_list_lines_cur_tab(cur_language, layout, tab_name)\n    \n            for line in range(len(list_buttons)):\n                page = CapitalPage(d, test_link)\n>               page.selected_tab_and_line_button_trade_click(list_buttons, line)\n\ntests/capital_page_test.py:874: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/capital_com/capital_page.py:257: in selected_tab_and_line_button_trade_click\n    list_buttons[y].click()\n../../../.cache/pypoetry/virtualenvs/testcapitalcom-G_ZVEfM_-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcom-G_ZVEfM_-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:410: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcom-G_ZVEfM_-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:444: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fb2f6f5f2e0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...\\\\n#17 0x56262e03de36 \\\\u003Cunknown>\\\\n#18 0x56262e059333 \\\\u003Cunknown>\\\\n#19 0x7fb2bfe05b43 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = \"{}.{}\".format(frame[\"className\"], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: headless chrome=108.0.5359.98)\nE       Stacktrace:\nE       #0 0x56262dfc82a3 <unknown>\nE       #1 0x56262dd86dfd <unknown>\nE       #2 0x56262ddc49fc <unknown>\nE       #3 0x56262ddb8dc5 <unknown>\nE       #4 0x56262dde3b32 <unknown>\nE       #5 0x56262ddb861f <unknown>\nE       #6 0x56262dde3cfe <unknown>\nE       #7 0x56262ddfb47c <unknown>\nE       #8 0x56262dde3903 <unknown>\nE       #9 0x56262ddb6ece <unknown>\nE       #10 0x56262ddb7fde <unknown>\nE       #11 0x56262e01863e <unknown>\nE       #12 0x56262e01bb79 <unknown>\nE       #13 0x56262dffe89e <unknown>\nE       #14 0x56262e01ca83 <unknown>\nE       #15 0x56262dff1505 <unknown>\nE       #16 0x56262e03dca8 <unknown>\nE       #17 0x56262e03de36 <unknown>\nE       #18 0x56262e059333 <unknown>\nE       #19 0x7fb2bfe05b43 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcom-G_ZVEfM_-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:249: ElementNotInteractableException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"browser","time":{"start":1673249737916,"stop":1673249737916,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"worker_id","time":{"start":1673249737916,"stop":1673249737916,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"d","time":{"start":1673249737916,"stop":1673249740034,"duration":2118},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"go","time":{"start":1673249740034,"stop":1673249740034,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"cur_role","time":{"start":1673249740035,"stop":1673249740035,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"cur_language","time":{"start":1673258690609,"stop":1673258690609,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"cur_license","time":{"start":1673259001583,"stop":1673259001583,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"description":"\n        Check: widget \"Trading instrument\"\n        Licence: All. Language - EN.\n        Widgen has 2 layouts\n        ","status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: headless chrome=108.0.5359.98)\nStacktrace:\n#0 0x56262dfc82a3 <unknown>\n#1 0x56262dd86dfd <unknown>\n#2 0x56262ddc49fc <unknown>\n#3 0x56262ddb8dc5 <unknown>\n#4 0x56262dde3b32 <unknown>\n#5 0x56262ddb861f <unknown>\n#6 0x56262dde3cfe <unknown>\n#7 0x56262ddfb47c <unknown>\n#8 0x56262dde3903 <unknown>\n#9 0x56262ddb6ece <unknown>\n#10 0x56262ddb7fde <unknown>\n#11 0x56262e01863e <unknown>\n#12 0x56262e01bb79 <unknown>\n#13 0x56262dffe89e <unknown>\n#14 0x56262e01ca83 <unknown>\n#15 0x56262dff1505 <unknown>\n#16 0x56262e03dca8 <unknown>\n#17 0x56262e03de36 <unknown>\n#18 0x56262e059333 <unknown>\n#19 0x7fb2bfe05b43 <unknown>","statusTrace":"self = <tests.capital_page_test.Tests object at 0x7fb2f623abf0>\nworker_id = 'master'\nd = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"2fb1e949aa0fcc0d82b42aeb33d18c0d\")>\ncur_login = 'Empty', cur_password = 'Empty', cur_role = 'NoReg'\ncur_language = 'zh', cur_license = 'ASIC'\n\n    @allure.feature(\"F_08 | Widget [Trading instrument]\")\n    @allure.story(\"S_08.03 | Widget [Trading instrument] tab [Indices] button [Trade]\")\n    @allure.step(\"Start test 'Click 'Trade' buttons on the 'Indices' tab 'Trading instrument' widget'\")\n    def test_08_03_widget_trading_instrument(\n        self, worker_id, d, cur_login, cur_password, cur_role, cur_language, cur_license\n    ):\n        \"\"\"\n        Check: widget \"Trading instrument\"\n        Licence: All. Language - EN.\n        Widgen has 2 layouts\n        \"\"\"\n        global test_link\n        global page\n    \n        tab_name = \"Indices\"\n        print(f\"worker_id = {worker_id}\")\n    \n        if not (cur_license == \"FCA\" and tab_name == \"Cryptocurrencies\"):\n            self.preconditions(d, cur_login, cur_password, cur_role, cur_language, cur_license)\n    \n            page = CapitalPage(d, test_link)\n            if not page.current_page_is(test_link):\n                page.open_page()\n    \n            layout = page.what_is_the_current_layout(cur_language)\n            page.widget_trading_instrument_cur_tab_click(cur_language, layout, tab_name)\n            list_buttons = page.get_list_lines_cur_tab(cur_language, layout, tab_name)\n    \n            for line in range(len(list_buttons)):\n                page = CapitalPage(d, test_link)\n>               page.selected_tab_and_line_button_trade_click(list_buttons, line)\n\ntests/capital_page_test.py:874: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/capital_com/capital_page.py:257: in selected_tab_and_line_button_trade_click\n    list_buttons[y].click()\n../../../.cache/pypoetry/virtualenvs/testcapitalcom-G_ZVEfM_-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../.cache/pypoetry/virtualenvs/testcapitalcom-G_ZVEfM_-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:410: in _execute\n    return self._parent.execute(command, params)\n../../../.cache/pypoetry/virtualenvs/testcapitalcom-G_ZVEfM_-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:444: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fb2f6f5f2e0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...\\\\n#17 0x56262e03de36 \\\\u003Cunknown>\\\\n#18 0x56262e059333 \\\\u003Cunknown>\\\\n#19 0x7fb2bfe05b43 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = \"{}.{}\".format(frame[\"className\"], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: headless chrome=108.0.5359.98)\nE       Stacktrace:\nE       #0 0x56262dfc82a3 <unknown>\nE       #1 0x56262dd86dfd <unknown>\nE       #2 0x56262ddc49fc <unknown>\nE       #3 0x56262ddb8dc5 <unknown>\nE       #4 0x56262dde3b32 <unknown>\nE       #5 0x56262ddb861f <unknown>\nE       #6 0x56262dde3cfe <unknown>\nE       #7 0x56262ddfb47c <unknown>\nE       #8 0x56262dde3903 <unknown>\nE       #9 0x56262ddb6ece <unknown>\nE       #10 0x56262ddb7fde <unknown>\nE       #11 0x56262e01863e <unknown>\nE       #12 0x56262e01bb79 <unknown>\nE       #13 0x56262dffe89e <unknown>\nE       #14 0x56262e01ca83 <unknown>\nE       #15 0x56262dff1505 <unknown>\nE       #16 0x56262e03dca8 <unknown>\nE       #17 0x56262e03de36 <unknown>\nE       #18 0x56262e059333 <unknown>\nE       #19 0x7fb2bfe05b43 <unknown>\n\n../../../.cache/pypoetry/virtualenvs/testcapitalcom-G_ZVEfM_-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:249: ElementNotInteractableException","steps":[{"name":"Start test 'Click 'Trade' buttons on the 'Indices' tab 'Trading instrument' widget'","time":{"start":1673259023573,"stop":1673259028812,"duration":5239},"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: headless chrome=108.0.5359.98)\nStacktrace:\n#0 0x56262dfc82a3 <unknown>\n#1 0x56262dd86dfd <unknown>\n#2 0x56262ddc49fc <unknown>\n#3 0x56262ddb8dc5 <unknown>\n#4 0x56262dde3b32 <unknown>\n#5 0x56262ddb861f <unknown>\n#6 0x56262dde3cfe <unknown>\n#7 0x56262ddfb47c <unknown>\n#8 0x56262dde3903 <unknown>\n#9 0x56262ddb6ece <unknown>\n#10 0x56262ddb7fde <unknown>\n#11 0x56262e01863e <unknown>\n#12 0x56262e01bb79 <unknown>\n#13 0x56262dffe89e <unknown>\n#14 0x56262e01ca83 <unknown>\n#15 0x56262dff1505 <unknown>\n#16 0x56262e03dca8 <unknown>\n#17 0x56262e03de36 <unknown>\n#18 0x56262e059333 <unknown>\n#19 0x7fb2bfe05b43 <unknown>\n\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcom-G_ZVEfM_-py3.10/lib/python3.10/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/home/runner/work/TestCapitalCom/TestCapitalCom/tests/capital_page_test.py\", line 874, in test_08_03_widget_trading_instrument\n    page.selected_tab_and_line_button_trade_click(list_buttons, line)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcom-G_ZVEfM_-py3.10/lib/python3.10/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/home/runner/work/TestCapitalCom/TestCapitalCom/pages/capital_com/capital_page.py\", line 257, in selected_tab_and_line_button_trade_click\n    list_buttons[y].click()\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcom-G_ZVEfM_-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py\", line 93, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcom-G_ZVEfM_-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py\", line 410, in _execute\n    return self._parent.execute(command, params)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcom-G_ZVEfM_-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py\", line 444, in execute\n    self.error_handler.check_response(response)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcom-G_ZVEfM_-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py\", line 249, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[{"name":"Run preconditions","time":{"start":1673259023573,"stop":1673259023573,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"2fb1e949aa0fcc0d82b42aeb33d18c0d\")>"},{"name":"cur_login","value":"'Empty'"},{"name":"cur_password","value":"'Empty'"},{"name":"cur_role","value":"'NoReg'"},{"name":"cur_language","value":"'zh'"},{"name":"cur_license","value":"'ASIC'"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"What is the current layout Widget 'Trading instrument'?","time":{"start":1673259023578,"stop":1673259023593,"duration":15},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"language","value":"'zh'"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Click tab ''Indices'' on Widget 'Trading instrument' (layout: 2)","time":{"start":1673259023594,"stop":1673259023765,"duration":171},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"language","value":"'zh'"},{"name":"layout","value":"2"},{"name":"tab_name","value":"'Indices'"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Get list of lines with buttons in 'Indices' tab. (Layout: 2","time":{"start":1673259023765,"stop":1673259023780,"duration":15},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"language","value":"'zh'"},{"name":"layout","value":"2"},{"name":"tab_name","value":"'Indices'"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true},{"name":"Click button 'Trade' on the '0' line selected tab.","time":{"start":1673259023781,"stop":1673259028812,"duration":5031},"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: headless chrome=108.0.5359.98)\nStacktrace:\n#0 0x56262dfc82a3 <unknown>\n#1 0x56262dd86dfd <unknown>\n#2 0x56262ddc49fc <unknown>\n#3 0x56262ddb8dc5 <unknown>\n#4 0x56262dde3b32 <unknown>\n#5 0x56262ddb861f <unknown>\n#6 0x56262dde3cfe <unknown>\n#7 0x56262ddfb47c <unknown>\n#8 0x56262dde3903 <unknown>\n#9 0x56262ddb6ece <unknown>\n#10 0x56262ddb7fde <unknown>\n#11 0x56262e01863e <unknown>\n#12 0x56262e01bb79 <unknown>\n#13 0x56262dffe89e <unknown>\n#14 0x56262e01ca83 <unknown>\n#15 0x56262dff1505 <unknown>\n#16 0x56262e03dca8 <unknown>\n#17 0x56262e03de36 <unknown>\n#18 0x56262e059333 <unknown>\n#19 0x7fb2bfe05b43 <unknown>\n\n","statusTrace":"  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcom-G_ZVEfM_-py3.10/lib/python3.10/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/home/runner/work/TestCapitalCom/TestCapitalCom/pages/capital_com/capital_page.py\", line 257, in selected_tab_and_line_button_trade_click\n    list_buttons[y].click()\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcom-G_ZVEfM_-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py\", line 93, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcom-G_ZVEfM_-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py\", line 410, in _execute\n    return self._parent.execute(command, params)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcom-G_ZVEfM_-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py\", line 444, in execute\n    self.error_handler.check_response(response)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/testcapitalcom-G_ZVEfM_-py3.10/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py\", line 249, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[{"name":"list_buttons","value":"[<selenium.webdriver.remote.webelement.WebElement (session=\"2fb1e949aa0fcc0d82b42aeb33d18c0d\", element=\"b6bc078a-8d93-4412-9323-da1072cfe846\")>, <selenium.webdriver.remote.webelement.WebElement (session=\"2fb1e949aa0fcc0d82b42aeb33d18c0d\", element=\"1a8f3fb3-516e-4057-a6b0-3b05b903b077\")>, <selenium.webdriver.remote.webelement.WebElement (session=\"2fb1e949aa0fcc0d82b42aeb33d18c0d\", element=\"c6105c33-3ccb-47a4-80f7-1cb8e7c27ec7\")>, <selenium.webdriver.remote.webelement.WebElement (session=\"2fb1e949aa0fcc0d82b42aeb33d18c0d\", element=\"0f242b4a-bae2-4056-a498-7609e3aaa58a\")>, <selenium.webdriver.remote.webelement.WebElement (session=\"2fb1e949aa0fcc0d82b42aeb33d18c0d\", element=\"c28dc77f-eb69-478c-8092-612aa37abf58\")>, <selenium.webdriver.remote.webelement.WebElement (session=\"2fb1e949aa0fcc0d82b42aeb33d18c0d\", element=\"69577fc7-b516-4cfe-9631-f8db02de04cd\")>, <selenium.webdriver.remote.webelement.WebElement (session=\"2fb1e949aa0fcc0d82b42aeb33d18c0d\", element=\"70d0fa3e-1cd1-4433-b74d-06aeecdce0fa\")>, <selenium.webdriver.remote.webelement.WebElement (session=\"2fb1e949aa0fcc0d82b42aeb33d18c0d\", element=\"a8b18470-d834-4fd4-9dc1-1bbce3423ae0\")>, <selenium.webdriver.remote.webelement.WebElement (session=\"2fb1e949aa0fcc0d82b42aeb33d18c0d\", element=\"67cd6ead-27c7-4ffb-87e4-ec51a5f6e563\")>, <selenium.webdriver.remote.webelement.WebElement (session=\"2fb1e949aa0fcc0d82b42aeb33d18c0d\", element=\"dae46bfa-fa65-4f3a-9464-e6fcbf3bb95f\")>]"},{"name":"y","value":"0"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[],"parameters":[{"name":"worker_id","value":"'master'"},{"name":"d","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"2fb1e949aa0fcc0d82b42aeb33d18c0d\")>"},{"name":"cur_login","value":"'Empty'"},{"name":"cur_password","value":"'Empty'"},{"name":"cur_role","value":"'NoReg'"},{"name":"cur_language","value":"'zh'"},{"name":"cur_license","value":"'ASIC'"}],"stepsCount":5,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":true}],"attachments":[{"uid":"fef441760146b328","name":"Screeshot","source":"fef441760146b328.png","type":"image/png","size":1852107},{"uid":"5ce3f212125e89cc","name":"stdout","source":"5ce3f212125e89cc.txt","type":"text/plain","size":37}],"parameters":[],"stepsCount":6,"attachmentsCount":2,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"go::0","time":{"start":1673259062728,"stop":1673259063065,"duration":337},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"feature","value":"F_08 | Widget [Trading instrument]"},{"name":"story","value":"S_08.03 | Widget [Trading instrument] tab [Indices] button [Trade]"},{"name":"epic","value":"Testing capital.com. All language. All license"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"capital_page_test"},{"name":"subSuite","value":"Tests"},{"name":"host","value":"fv-az409-354"},{"name":"thread","value":"2481-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.capital_page_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"cur_language","value":"'zh'"},{"name":"cur_license","value":"'ASIC'"},{"name":"cur_login","value":"'Empty'"},{"name":"cur_password","value":"'Empty'"},{"name":"cur_role","value":"'NoReg'"},{"name":"go","value":"'chrome'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"3b7b1b6d669e33b5.json","parameterValues":["'zh'","'ASIC'","'Empty'","'Empty'","'NoReg'","'chrome'"]}